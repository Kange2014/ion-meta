##########################################
## Map samples against filtered genomes ##
##########################################
rule bowtie2build_filtered:
    """Build bowtie2 index of genomes that pass the centrifuge and sourmash filters"""
    input:
        opj(config["results_path"],"centrifuge","filtered","{sample}_se.genomes.filtered.fna")
    output:
        expand(opj(config["results_path"],"centrifuge","bowtie2","{{sample}}_se.genomes.filtered.{index}.bt2l"),index=range(1,5))
        #opj(config["results_path"],"centrifuge","bowtie2","{sample}_se.genomes.filtered.1.bt2l")
    params:
        prefix = opj(config["results_path"],"centrifuge","bowtie2","{sample}_se.genomes.filtered")
    resources:
        runtime = lambda wildcards, attempt: attempt**2*60*2
    shell:
        """
        bowtie2-build --large-index {input[0]} {params.prefix}
        """

rule bowtie2_map_against_filtered_se:
    input:
        index = expand(opj(config["results_path"],"centrifuge","bowtie2","{{sample}}_se.genomes.filtered.{index}.bt2l"), index=range(1,5)),
        #index = expand(opj(config["results_path"],"centrifuge","bowtie2","{sample}_se.genomes.filtered.1.bt2l"), sample=Samples.keys()),
        se = opj(config["results_path"],"centrifuge","{sample}_se.filtered.fq")
    output:
        temp(opj(config["results_path"],"centrifuge","bowtie2","{sample}_se.sam"))
    threads: config["bowtie2_threads"]
    params:
        prefix = opj(config["results_path"],"centrifuge","bowtie2","{sample}_se.genomes.filtered"),
        tmp_out = opj(config["scratch_path"],"{sample}_se.filtered.sam"),
        setting = config["bowtie2_params"]
    resources:
        runtime = lambda wildcards, attempt: attempt**2*60*4
    shell:
        """
        bowtie2 {params.setting} -x {params.prefix} -U {input.se} --no-unal -p {threads} > {params.tmp_out}
        mv {params.tmp_out} {output[0]}
        """

######################################
## Convert sam files to sorted bams ##
######################################
rule sort_filtered_sam:
    """Convert to bam and sort in one rule"""
    input:
        opj(config["results_path"],"centrifuge","bowtie2","{sample}_se.sam")
    output:
        opj(config["report_path"],"bowtie2","{sample}_se.bam"),
        opj(config["report_path"],"bowtie2","{sample}_se.bam.bai")
    params:
        tmp_out = opj(config["scratch_path"],"{sample}_se.filtered.sorted.bam")
    resources:
        runtime = lambda wildcards, attempt: attempt**2*60
    shell:
        """
        samtools view -bh {input[0]} | samtools sort - > {params.tmp_out}
        mv {params.tmp_out} {output[0]}
        samtools index {output[0]}
        """

##############################################
## Calculate genome coverage from bam files ##
##############################################
rule make_filtered_genomefile:
    """Creates the genome file for use with bedtools genomecov"""
    input:
        opj(config["results_path"],"centrifuge","filtered","{sample}_se.genomes.filtered.fna")
    output:
        opj(config["results_path"],"centrifuge","filtered","{sample}_se.genomes.filtered.bed")
    run:
        with open(output[0], 'w') as fh_out:
            for line in shell("seqtk comp {input[0]} | cut -f1,2", iterable=True):
                seq,size = line.rstrip().split("\t")
                fh_out.write("{}\t0\t{}\n".format(seq,size))

rule calculate_genomecov:
    """Calculates genome coverage for filtered genomes"""
    input:
        bam = opj(config["report_path"],"bowtie2","{sample}_se.bam"),
        bed = opj(config["results_path"],"centrifuge","filtered","genomes.filtered.bed")
    output:
        opj(config["results_path"],"centrifuge","bowtie2","{sample}_se.coverage")
    resources:
        runtime = lambda wildcards, attempt: attempt**2*60
    shell:
        """
        bedtools coverage -b {input.bam} -a {input.bed} > {output[0]}
        """

#rule collate_genomecov:
#    input:
#        expand(opj(config["results_path"],"centrifuge","bowtie2","{sample}_se.coverage"),sample=Samples.keys())
#    output:
#        opj(config["report_path"],"bowtie2","genome_coverage.tab")
#    run:
#        df = pd.DataFrame()
#        for f in input:
#            sample = os.path.basename(f).replace(".coverage","")
#            _df = pd.read_csv(f, header=None, sep="\t")
#            _df = _df.assign(sample=pd.Series([sample]*len(_df)))
#            df = pd.concat([df,_df])
#        df = df.iloc[:,[0,6,7]]
#        df.columns = ["genome","coverage","sample"]
#        df.sort_values("genome", inplace=True)
#        df.to_csv(output[0], sep="\t", index=False)

#rule plot_genomecov:
#    input:
#        opj(config["report_path"],"bowtie2","genome_coverage.tab")
#    output:
#        opj(config["report_path"],"bowtie2","mean_genome_coverage.pdf"),
#        opj(config["report_path"],"bowtie2","samplewise_genome_coverage.pdf")
#    run:
#        import matplotlib as mpl
#        mpl.use('agg')
#        import seaborn as sns, matplotlib.pyplot as plt
#        plt.style.use('ggplot')

#        df = pd.read_csv(input[0], sep="\t")
#        df["genome"] = [x.replace("_"," ") for x in df.genome]
#        # Plot average coverage per genome
#        #ax = sns.barplot(data=df, x="coverage", y="genome", errwidth=.5)
#        #plt.savefig(output[0], dpi=300, bbox_inches="tight")
#        #plt.close()

#        # Plot coverage per sample
#        ax = sns.catplot(data=df, col="genome", x="sample", y="coverage", strip="bar", col_wrap=4, height=3)
#        plt.subplots_adjust(wspace=0.1)
#        ax.set_xticklabels(rotation=90)
#        ax.set_titles("{col_name}",size=6)
#        plt.savefig(output[1], dpi=300, bbox_inches="tight")
#        plt.close()
